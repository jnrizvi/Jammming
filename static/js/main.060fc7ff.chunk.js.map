{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","components_Track_Track","key","id","SearchResults","components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","searchTerm","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","theTrack","_this2","currentTrack","_this3","class","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.060fc7ff.chunk.js","sourcesContent":["const clientId = \"9b2163229c13412ab81f78eba4000f01\";\nconst redirectUri = \"http://localhost:3000/\";\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n            return accessToken;\n          } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;    // redirect the user to ^this accessUrl \n          }\n    },\n    \n    search(searchTerm) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then((response)=> {return response.json();\n        }).then((jsonResponse) => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n    \n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n    \n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                });\n            });\n        });\n    }   \n};\n\n\n\n\n\nexport default Spotify;","import React from \"react\";\nimport \"./SearchBar.css\";\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {term: \"\"};\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});  // didn't have to use this.state as the key\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from \"react\";\nimport \"./Track.css\";\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    \n    renderAction() {\n        if ( this.props.isRemoval) {\n            return <button onClick={this.removeTrack}>-</button>\n        } else {\n            return <button onClick={this.addTrack}>+</button>\n        }\n    }\n\n    addTrack(event) {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack(event) {\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n                {/*<button className=\"Track-action\"><!-- + or - will go here --></button>*/}\n            </div>\n        );\n    }\n}\n\nexport default Track;","import React from \"react\";\nimport \"./TrackList.css\";\nimport Track from \"../Track/Track.js\";\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map((track)=> {\n            return <Track track={track}\n                          key={track.id}\n                          onAdd={this.props.onAdd}\n                          isRemoval={this.props.isRemoval}\n                          onRemove={this.props.onRemove} />\n          })\n        }    \n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React from \"react\";\nimport \"./SearchResults.css\";\nimport TrackList from \"../TrackList/TrackList.js\";\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd}/>\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;","import React from \"react\";\nimport \"./Playlist.css\";\nimport TrackList from \"../TrackList/TrackList.js\";\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n                <TrackList tracks={this.props.playlistTracks} isRemoval={true} onRemove={this.props.onRemove}/>\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport SearchBar from \"../SearchBar/SearchBar.js\";\nimport SearchResults from \"../SearchResults/SearchResults.js\";\nimport Playlist from \"../Playlist/Playlist.js\";\nimport Spotify from \"../../util/Spotify.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [\n        {name: \"Too Far From Home\", artist: \"Gina\", album: \"2manyTears\", id: 111},\n        {name: \"County Girl\", artist: \"Howard\", album: \"Tequila Town\", id: 222},\n        {name: \"Uber Man\", artist: \"Daniel\", album: \"Urban Gangster\", id: 33}\n      ],\n      playlistName: \"value of playlistName\",\n      playlistTracks: [\n        {name: \"Green Green Fields\", artist: \"Smith\", album: \"Happy Times\", id: 123},\n        {name: \"Unforgettable\", artist: \"Lisa\", album: \"Lonely Loner\", id: 456}, \n        {name: \"Zippy Zebras\", artist: \"Kowalski\", album: \"Beautiful Africa\", id: 789}\n      ]\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if ( tracks.find((savedTrack) => savedTrack.id === track.id )) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter((theTrack)=> theTrack.id !== track.id);\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n  \n  savePlaylist() {\n    let tracks = this.state.playlistTracks;\n    let trackUris = tracks.map( (currentTrack)=> currentTrack.uri);\n    \n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(searchTerm) {\n    Spotify.search(searchTerm).then((searchResults)=>{\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span class=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} \n              onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}